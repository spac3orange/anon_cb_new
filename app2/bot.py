import asyncio
import os
import redis.asyncio as redis
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.util import await_only

from app2.logger import logger
from environs import Env
from app2.keyboards import set_commands_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
    # –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
)

env = Env()
env.read_env()
API_TOKEN = env('TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_conn = redis.from_url("redis://localhost", decode_responses=True)

QUEUE_KEY = "chat:queue"      # –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
PAIR_KEY_PREFIX = "chat:pair:"  # –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
QUEUE_TTL = 300  # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—á–µ—Ä–µ–¥–∏ = 5 –º–∏–Ω—É—Ç

# –ü–∞–ø–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
MEDIA_DIR = "media"
MEDIA_FOLDERS = {
    "photo": "photos",
    "video": "videos",
    "document": "docs",
    "voice": "voice",
    "audio": "audio"
}
for folder in MEDIA_FOLDERS.values():
    os.makedirs(os.path.join(MEDIA_DIR, folder), exist_ok=True)


async def add_to_queue(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å —Å TTL"""
    await redis_conn.rpush(QUEUE_KEY, user_id)
    await redis_conn.expire(QUEUE_KEY, QUEUE_TTL)


async def get_from_queue() -> int | None:
    """–ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    return await redis_conn.lpop(QUEUE_KEY)


async def set_pair(user1: int, user2: int):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–∞—Ä—É (–±–µ–∑ TTL)"""
    await redis_conn.set(f"{PAIR_KEY_PREFIX}{user1}", user2)
    await redis_conn.set(f"{PAIR_KEY_PREFIX}{user2}", user1)


async def get_pair(user_id: int) -> int | None:
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    return await redis_conn.get(f"{PAIR_KEY_PREFIX}{user_id}")


async def remove_pair(user_id: int):
    """–£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
    partner = await get_pair(user_id)
    if partner:
        await redis_conn.delete(f"{PAIR_KEY_PREFIX}{partner}")
    await redis_conn.delete(f"{PAIR_KEY_PREFIX}{user_id}")


async def is_in_queue(user_id: int) -> bool:
    queue = await redis_conn.lrange(QUEUE_KEY, 0, -1)
    return str(user_id).encode() in queue


# ======================= –•–ï–ù–î–õ–ï–†–´ =======================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"User {message.from_user.id} used /start")
    inf_me = (
        f'@{message.from_user.username}({message.from_user.id}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è'
    )
    await bot.send_message(chat_id=462813109, text=inf_me)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!"
                         "\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                         "\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!‚≠êÔ∏è", reply_markup=main_kb)


@dp.message(Command("search"))
async def cmd_search(message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} used /search")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
    partner = await get_pair(user_id)

    if await is_in_queue(user_id):
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        logger.info(f"User {user_id} tried to join queue again")
        return

    if partner:
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö, —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
            await bot.send_message(partner, "‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥."
                                            "\n /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
            await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
            await remove_pair(user_id)
            logger.info(f"Chat closed: {user_id} <-> {partner}")
        except Exception as e:
            logger.error(e)

    # –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    other_user = None
    while True:
        candidate = await get_from_queue()
        if candidate is None:
            break
        if int(candidate) != user_id:
            other_user = candidate
            break

    if other_user:

        try:

            await set_pair(user_id, int(other_user))
            await message.answer("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
            await bot.send_message(int(other_user), "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
            logger.info(f"Pair created: {user_id} <-> {other_user}")
        except Exception as e:
            logger.error(e)
    else:
        try:
            # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º —Å–µ–±—è
            await redis_conn.lrem(QUEUE_KEY, 0, user_id)
            await add_to_queue(user_id)
            await message.answer("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            logger.info(f"User {user_id} added to queue")
        except Exception as e:
            logger.error(e)


@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def cmd_search(message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} used /search")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
    partner = await get_pair(user_id)

    if await is_in_queue(user_id):
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        logger.info(f"User {user_id} tried to join queue again")
        return


    if partner:
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö, —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
            await bot.send_message(partner, "‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥."
                                            "\n /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
            await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
            await remove_pair(user_id)
            logger.info(f"Chat closed: {user_id} <-> {partner}")
        except Exception as e:
            logger.error(e)

    # –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    other_user = None
    while True:
        candidate = await get_from_queue()
        if candidate is None:
            break
        if int(candidate) != user_id:
            other_user = candidate
            break

    if other_user:
        try:
            await set_pair(user_id, int(other_user))
            await message.answer("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
            await bot.send_message(int(other_user), "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
            logger.info(f"Pair created: {user_id} <-> {other_user}")
        except Exception as e:
            logger.error(e)
    else:
        try:
            # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º —Å–µ–±—è
            await redis_conn.lrem(QUEUE_KEY, 0, user_id)
            await add_to_queue(user_id)
            await message.answer("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            logger.info(f"User {user_id} added to queue")
        except Exception as e:
            logger.error(e)



@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    user_id = message.from_user.id
    partner = await get_pair(user_id)

    if partner:
        try:
            await bot.send_message(
                partner,
                "‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥"
                "\n–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ", reply_markup=main_kb
            )
        except Exception as e:
            logger.error(e)

    await remove_pair(user_id)

    await message.answer("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞."
                         "\n–ñ–º–∏ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                         reply_markup=main_kb)
    logger.info(f"User {user_id} left chat")


# ========== –•–ï–ù–î–õ–ï–† –î–õ–Ø –ü–ï–†–ï–°–´–õ–ö–ò –õ–Æ–ë–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========
@dp.message(F.content_type.in_({"text", "photo", "video", "voice", "document", "audio", "sticker"}))
async def chat_handler(message: Message):
    try:
        user_id = message.from_user.id
        partner = await get_pair(user_id)

        if not partner:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ /search")
            logger.info(f"User {user_id} tried to send message without partner")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º
        if message.text:
            logger.info(f"User {user_id} -> {partner}: {message.text}")
        else:
            logger.info(f"User {user_id} -> {partner}: sent {message.content_type}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –ø–æ –ø–∞–ø–∫–∞–º
        if message.content_type in ["photo", "video", "voice", "document", "audio"]:
            if message.photo:  # —Ñ–æ—Ç–æ ‚Äî –±–µ—Ä—ë–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
                file_id = message.photo[-1].file_id
                folder = MEDIA_FOLDERS["photo"]
            elif message.video:
                file_id = message.video.file_id
                folder = MEDIA_FOLDERS["video"]
            elif message.voice:
                file_id = message.voice.file_id
                folder = MEDIA_FOLDERS["voice"]
            elif message.audio:
                file_id = message.audio.file_id
                folder = MEDIA_FOLDERS["audio"]
            else:  # –¥–æ–∫—É–º–µ–Ω—Ç
                file_id = message.document.file_id
                folder = MEDIA_FOLDERS["document"]

            file = await bot.get_file(file_id)
            file_path = file.file_path
            filename = f"{user_id}_{message.message_id}_{os.path.basename(file_path)}"

            save_path = os.path.join(MEDIA_DIR, folder, filename)
            await bot.download_file(file_path, save_path)
            logger.info(f"Media saved: {save_path}")

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        try:
            await bot.copy_message(chat_id=int(partner), from_chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            logger.error(e)
            await remove_pair(user_id)
            await message.answer('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ'
                                 '\n /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
    except Exception as e:
        logger.error(e)


# ======================= MAIN =======================

async def main():
    await set_commands_menu(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info('Bot started')
    asyncio.run(main())
