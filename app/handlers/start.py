from aiogram import Router
from aiogram.filters import Command
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto
from app.keyboards import main_kb
from app.utils import with_session
from app.database import crud
from app.states import user_states

router = Router()


@router.message(Command(commands='start'))
@with_session
async def start(message: Message, session):
    uid = message.from_user.id
    username = message.from_user.username
    await crud.add_user(session, user_id=uid, username=username)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                         reply_markup=main_kb.main_menu())


# –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.callback_query(F.text == 'üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
@with_session
async def search_companion(call: CallbackQuery, state, session):
    uid = call.from_user.id
    uname = call.from_user.username

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await crud.add_user(session, uid, uname)

    # –°—Ç–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    await crud.set_user_state(session, uid, "Searching")

    # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    partner = await crud.find_searching_user(session, exclude_user_id=uid)

    if partner:
        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥
        dialog = await crud.create_dialog(session, user, partner)

        # –°–æ–æ–±—â–∞–µ–º –æ–±–æ–∏–º
        await call.message.answer("üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
        await call.bot.send_message(partner.user_id, "üéâ –í–∞–º –Ω–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")

    else:
        await call.message.answer("‚è≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    # FSM –¥–ª—è –∫–Ω–æ–ø–æ–∫
    await state.set_state(user_states.StartDialog.dialog_data)


# –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ë–î
@router.message(F.text)
@with_session
async def relay_message(message: Message, state, session):
    uid = message.from_user.id

    # –£–∑–Ω–∞–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    companion_id = await crud.get_companion_id(session, uid)

    if not companion_id:
        await message.answer("‚ùó –°–µ–π—á–∞—Å –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–∂–º–∏—Ç–µ ¬´üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.")
        return

    try:
        await message.bot.send_message(
            chat_id=companion_id,
            text=message.text
        )
    except Exception as e:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")



@router.callback_query(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
@with_session
async def finish_dialog(call: CallbackQuery, session):
    uid = call.from_user.id

    companion_id = await crud.get_companion_id(session, uid)
    if not companion_id:
        await call.message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return

    success = await crud.end_dialog(session, uid)
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await call.message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        try:
            await call.bot.send_message(companion_id, "‚úÖ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
        except Exception:
            pass
    else:
        await call.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.")
